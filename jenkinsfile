import groovy.json.JsonSlurper

REPO="prismcmap"
SRC_TAG="latest"
DEST_TAG="production"

def DOCKER_NAMES=[
    "assemble-db",
    "batch-correct-module",
    "biomarker-module",
    "collate",
    "csv2json",
    "deal",
    "depmap_versions",
    "drc-module",
    "extract-biomarker",
    "landing",
    "lfc-module",
    "merge-csvs",
    "norm-module",
    "pivot",
    "pivot_splits",
    "register-mts",
    "reports",
    "qc-screen",
    "split",
    "stack"
]


def getCheckedOutGitCommitHash() {
    def gitFolder = "$projectDir/.git/"
    def takeFromHash = 12
    /*
     * '.git/HEAD' contains either
     *      in case of detached head: the currently checked out commit hash
     *      otherwise: a reference to a file containing the current commit hash
     */
    def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
    def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd
    // def isRef = head.length > 1     // ref: refs/heads/master

    if(isCommit) return head[0].trim().take(takeFromHash) // e5a7c79edabb

    def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master
    refHead.text.trim().take takeFromHash
}
def parallelStagesMap = DOCKER_NAMES.collectEntries {
    ["${it}" : generateStage(it,getCheckedOutGitCommitHash())]
}
def generateStage(job,hash) {
    return {
        stage("stage: ${job}") {
            sh script: "docker pull ${REPO}/${job}:${SRC_TAG}"
            sh script: "docker tag $REPO/${job}:${SRC_TAG} ${REPO}/${job}:${DEST_TAG}  ${REPO}/${job}:${hash}"
            sh script: "docker push ${REPO}/${job}:${DEST_TAG}"
        }
    }
}


pipeline {
    agent any
    environment {     
        DOCKERHUB_CREDENTIALS= credentials('dockerhub-cred-jasiedu')     
    } 
    stages {
        stage('Login to Docker Hub') {         
            steps{                            
	            sh 'echo $DOCKERHUB_CREDENTIALS_PSW | sudo docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'                 
	            echo 'Login Completed'                
            }           
        }  
        stage('parallel stage') {
            steps {
                script {
                    parallel parallelStagesMap
                }
            }
        }
    }
}
